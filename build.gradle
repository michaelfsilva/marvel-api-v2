buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8'
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'io.swagger.core.v3.swagger-gradle-plugin' version '2.1.5'
    id 'java'
}

group = 'com.marvel.api'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '15'
description = 'New version of Marvel API to provide Marvel Comics data'

apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

//sonarqube {
//	properties {
//		property "sonar.exclusions", ['**/br/com/bradesco/fini/precificacao/config/**',
//									  '**/br/com/bradesco/fini/precificacao/entity/**']
//	}
//}

//jacoco {
//	reportsDir = file("$buildDir/customJacocoReportDir")
//}
//jacocoTestReport {
//	reports {
//		xml.enabled true
//		csv.enabled false
//		html.destination file("${buildDir}/jacocoHtml")
//	}
//
//	afterEvaluate {
//		classDirectories.setFrom(files(classDirectories.files.collect {
//			fileTree(dir: it,
//					exclude: ['**/br/com/bradesco/fini/precificacao/config/**',
//							  '**/br/com/bradesco/fini/precificacao/entity/**'])
//		}))
//	}
//}
//project.tasks["sonarqube"].dependsOn "jacocoTestReport"
//check.dependsOn jacocoTestReport

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('mapstructVersion', "1.4.1.Final")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}",
            'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor "org.mapstruct:mapstruct:${mapstructVersion}",
            'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    /*testImplementation*/ testCompile 'org.spockframework:spock-core:2.0-M4-groovy-3.0'
//	testImplementation 'org.spockframework:spock-spring:2.0-M4-groovy-3.0',
//	testImplementation 'com.athaydes:spock-reports:1.2.10'
//	testImplementation 'com.athaydes:spock-reports:1.6.1', { transitive = false }
//	testImplementation 'org.projectlombok:lombok:1.18.2',
//	'br.com.six2six:fixture-factory:3.1.0'
//	testCompile "org.testcontainers:spock:1.15.0"
    compile 'io.springfox:springfox-swagger2:2.9.2',
            'io.springfox:springfox-swagger-ui:2.9.2'/*,
			'net.logstash.logback:logstash-logback-encoder:6.4'*/
}

test {
    useJUnitPlatform()
}

bootRun {
    systemProperty 'spring.profiles.active', project.hasProperty('env') ? env : 'local'
//    if (project.hasProperty('env') == 'local') {
//        systemProperty 'useLocalDatabase', true
//    }
}

test {
    systemProperty 'spring.profiles.active', project.hasProperty('env') ? env : 'local'
}

apply from: rootProject.file('gradle/install-git-hooks.gradle')
