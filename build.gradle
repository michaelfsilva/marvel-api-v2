buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8'
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'groovy'
}

group = 'com.marvel.api'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
description = 'New version of Marvel API to provide Marvel Comics data'

apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property "sonar.exclusions", ['**/com/marvel/api/config/**',
                                      '**/com/marvel/api/entity/**']
    }
}

jacoco {
    reportsDir = file("$buildDir/customJacocoReportDir")
}
jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/com/marvel/api/config/**',
                              '**/com/marvel/api/entity/**'])
        }))
    }
}
project.tasks["sonarqube"].dependsOn "jacocoTestReport"
check.dependsOn jacocoTestReport

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('mapstructVersion', "1.4.1.Final")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-validation'
    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}",
            'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor "org.mapstruct:mapstruct:${mapstructVersion}",
            'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.security:spring-security-test'
//	        'br.com.six2six:fixture-factory:3.1.0',
//	        'org.projectlombok:lombok:1.18.2',
//	testImplementation 'com.athaydes:spock-reports:1.6.1', { transitive = false }
    testCompile 'org.spockframework:spock-core:2.0-M3-groovy-2.5',
            'org.spockframework:spock-spring:2.0-M3-groovy-2.5'
//	        'org.junit.jupiter:junit-jupiter-engine:5.2.0',
//	        'org.testcontainers:spock:1.15.0'
    compile 'io.springfox:springfox-swagger2:2.9.2',
            'io.springfox:springfox-swagger-ui:2.9.2'/*,
			'net.logstash.logback:logstash-logback-encoder:6.4'*/
}

test {
    useJUnitPlatform()
}

bootRun {
    systemProperty 'spring.profiles.active', project.hasProperty('env') ? env : 'local'
//    if (project.hasProperty('env') == 'local') {
//        systemProperty 'useLocalDatabase', true
//    }
}

test {
    systemProperty 'spring.profiles.active', project.hasProperty('env') ? env : 'local'
}

apply from: rootProject.file('gradle/install-git-hooks.gradle')
